How we are running Tests? 

//*[@id="headersignupform"]/div[3]/div[1]/div/label/span

any kind of web brwoser interaction - selenium library 


page object model - storing our web elements 

public webelement getfirstname(){

driver.findelement()

}


TestNG - Test Next generation - testing library/testing framework - Junit

Testing error - bug/defect - something is not consistent with the requirement 

req 1: firstname shoule not be more than 15 letters and must not accept and digits 




expected result - requirement docs - user stories,brd, srd, frd, 
actual result - testing 

compare expected vs actual - pass/failing - failing - defect - log the defect 
pass - no defect - nothing to log 


Test Scripts - 

coding error - we need to fix our code 


test error - application has defect - comparing expected vs actual 

1. to be able to seperate testing and configuration code 
2. to be able to seperate if there is multiple test in one test script 
3. to be able to compare expected vs actual 
4. to be able to generate reports - 200 tests - 
5. to be able to run all tests together - test suite 
6. data driven testing 


created Framework - object driven framework, data driven, hybrid framework 

useed Framework - testng, junit, cucumber 


TestNG Setup 

1. TestNG library
2. eclipse plugin for TestNG 

https://dl.bintray.com/testng-team/testng-eclipse-release/

TestNG: replacing main method of java 

pre-defined - pre-sequenced annotations  

BeforeMethod
AfterMethod


BeforeTest
Test
AfterTest


every annotations comes with a function - functions are created by us 

to get executed - the function get exectues 






beforetest
beforemthod
test1
aftermethod
beforemthod
test2
aftermethod
aftertest 


Test execution squence  - gets executed in alphanbetical order of the function name 
functiona name is refers as the test name in test ng











class car(){

int carmilease = 78; 


}




car c = new car(); 
c.milease=120; 

car d = new car(); 

d.milease= 200; 

car e = new car(); 

e.milease = 150; 


TestNG - Test Next Generation 


framework - Template 

run out tests - TestNG 

1. annotations - sequence of code execution, seperate configruation code to test code, sepertate multiple tests 






@BeforeTest - configuration , pre-requirments of tests 



@BeforeMethod - code we need to execute before each test - steps we need to execute before each test - reset a veraible value
delete the cookies, refresh the page, navigate to the home page to start with new test  
@Test - validatetitle(priority = 1)- the code for testing 
@AfterMethod - code we need to execute after each test - steps we need to execute after each test 


@BeforeMethod
@Test - validateurl (priority = 2) - the code for testing
@AfterMethod 
 

@BeforeMethod
@Test - validatebrowser (priority = 3) - the code for testing
@AfterMethod 

@AfterTest - close the browser, any other post requirement





every functions - 














expected with actual 

expected value - reqs docs, user story 
actual value - aftter testing 

assertion - for passing and failing scenrio 

expected vs actual 

2 strings
2 numbers
2 boolean values
assertTrue(true)



Test case - 6 steps - 
1. Test Scripts Vs Test/test case 

Test scripts - multiple tests/one test  

one test - one test case - one assertion 

100 test scripts - minimum 100 tests - 250 tests

2. convert manual test cases to automation test scripts 

500 manual test cases availale - 


validate requirments - 

sign up module - automation test script for the signup module 

- what you need to test again and again 

100 times - 99 times - o time

1. critical funtionality - sign up, sign in
2. regression - pay money through chatbox facebook, 

you have to look for requirements - user stories 

100 tests - 5 of them failed 

2-3 run 

manually test them

log it as a defect - assign  team lead - 

close the defect - 


expected vs actual 

testng , junit, cucumber




build means new code is deployed to the server 


12th july 
500 tests - passed 


15th july 
500 tests - 4 tests failed 

assertion - 

assertequals()


1. priority for tests 
2. we can make a test enabled or disabled 
3. we can make a test dependenn on another test





Test Suites - collection of test cases 

100 test cases together 

smoke testing
regression testing
sanity 
uat 
data driven testing


XML file - we can create test suite 


TestNG data driven framework - 

TestNG xml - extensible markup lagnuage - data transportation 

xml - start tags and end tags 

<class name="ngScripts.basicNg"></class>
<class name="ngScripts.basicNGOne "></class>





100 test scripts 

Test suite - xml 

Parameterized testing - data driven testing

object driven - page object model classes - seperate the test scripts from web elements 
data driven - parameterized testing using XML file - seperate the test data from the test scripts , test with multiple sets of data





java - selenium - testng 

java - selenium - cucumber 




git - maven - jenkins 

















































